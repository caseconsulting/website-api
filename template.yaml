AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless back-end for Case Consulting website

Parameters:
  ClientDomain:
    Type: String
    Description: Client domain used when configuring CORS
    Default: "'*'"
  Stage:
    Type: String
    Description: 'Deployment environment (e.g., dev, test, or prod)'
    AllowedValues:
      - dev
      - test
      - prod

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: nodejs10.x

  Api:
    # API Gateway endpoint type: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigateway-restapi-endpointconfiguration.html
    EndpointConfiguration: REGIONAL

    # API Gateway access logging: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigateway-stage-accesslogsetting.html
    AccessLogSetting:
      DestinationArn: !Sub
        - arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/website-api-${stageName}:*
        - stageName: !Ref Stage
      Format: $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId

    # Cross-Origin Resource Sharing (CORS) Configuration: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#cors-configuration
    Cors:
      AllowMethods: "'OPTIONS,POST,PUT'"
      AllowHeaders: "'Content-Type'"
      AllowOrigin: !Ref ClientDomain

#     # Send/receive binary data through the APIs
#     BinaryMediaTypes:
#       # These are equivalent to image/gif and image/png when deployed
#       - image~1gif
#       - image~1png

Resources:
  Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Join
        - ''
        - - 'case-consulting-job-applications-'
          - !Ref Stage
  Table:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Join
        - ''
        - - !Ref Stage
          - '-job-applications'
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
  ApplyFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: Accepts 'Apply Now' submissions from website and stores data in DynamoDB table.
      Handler: index.handler
      Timeout: 5
      CodeUri: apply/
      Events:
        postProxy:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /apply/
            Method: post
      Environment:
        Variables:
          table:
            Ref: Table
      Policies:
        - Statement:
            - Action:
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource:
                - Fn::Sub:
                    - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                    - tableName:
                        Ref: Table
              Effect: Allow
  UploadFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: Generates signed URLs to upload files to S3. This bypasses the API Gateway payload size limit of 10 MB.
      Handler: index.handler
      Timeout: 5
      CodeUri: upload/
      Events:
        postProxy:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /upload/{proxy+}
            Method: put
      Environment:
        Variables:
          bucket:
            Ref: Bucket
      Policies:
        - Statement:
            - Action:
                - s3:PutObject
              Resource:
                - Fn::Sub:
                    - arn:${AWS::Partition}:s3:::${bucketName}/*
                    - bucketName:
                        Ref: Bucket
              Effect: Allow

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  BucketName:
    Description: 'Name of S3 Bucket used by Upload function'
    Value: !Ref Bucket
  TableName:
    Description: 'Name of DynamoDB table used by Upload function'
    Value: !Ref Table
  ApiEndpoint:
    Description: 'API Gateway endpoint URL for Prod stage'
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
  ApplyFunction:
    Description: 'Apply Lambda Function ARN'
    Value: !GetAtt ApplyFunction.Arn
  ApplyFunctionIamRole:
    Description: 'Implicit IAM Role created for Apply function'
    Value: !GetAtt ApplyFunctionRole.Arn
  UploadFunction:
    Description: 'Upload Lambda Function ARN'
    Value: !GetAtt UploadFunction.Arn
  UploadFunctionIamRole:
    Description: 'Implicit IAM Role created for Upload function'
    Value: !GetAtt UploadFunctionRole.Arn
